---
title: "Jeffrey_exercise3_hw1"
author: "Jack Jeffrey"
format: html
editor: visual
---

## R code for Data Science for Beginners Day 3: Individual Exercises

## University of Essex

## Author: Jack Jeffrey

## Date 09-06-2024

# 1. Vectors

# 1.1 Create a vector

vec.a \<- c(1,3,5,7) \# combined digits into a vector

# 1.2 Create a second vector

vec.b \<- c(2,4,6,8) \# created a second vector

# 1.3 subtract the vectors

(vec.a - vec.b) \# subtracted vec.b from vec.a

# 1.4 create a new vector by multiplying vec.a and vec.b

vec.c \<- (vec.a \* vec.b) \# created vector.c

# 1.5 create a new vector by taking the square root of each element in vec.c

vec.d \<- sqrt(vec.c) \# created vector.d

# 1.6 find the third element of vector.d

third_element \<- vec.d\[3\] third_element \# identified third element in vec.d as 5.477226

# 1.7 create a vector 1-100 using seq

vec.e \<- seq(1, 100) \# created vec.e

# 1.8 use the mean fucntion on vec.e

vec_e_mean \<- mean(vec.e) \# calculated the mean for vec.e

# 1.9 use the sum function

vec_e_sum \<- sum(vec.e) print(vec_e_sum) \# vec_e_sum = 5050

# 1.10 use the length function

vec_e_length \<- length(vec.e) print(vec_e_length) \# length equals 100

# 1.11 divide sum by length

vec_e_sumandlength \<- sum(vec.e) / length(vec.e) print(vec_e_sumandlength) \# sum divided by length = 50.5 the same as the mean function

# 1.12 create an object that shows the olympic sequence

olympics \<- seq(from = 1896, to = 2012, by = 4) print(olympics) \# sequence successfully completed

# 1.13 number of elements in the olympics sequence

length(olympics) #length = 30

# 1.14 display the years of the olympics

paste(olympics)

# 1.15 find the number of olympics to 2040

future_olympics \<- seq(from = 1896, to = 2040, by = 4) total_olympics_2040 \<- length(future_olympics) print(total_olympics_2040) \# there will be 37 olympics since 1896 in 2040

# 2. Matrices

v1 \<- c(1,3,5,7,9,11) \# created a vector

# 2.2 length of the vector

length(v1) \# v1 length = 6

# 2.3 how many columns?

# answer is 3 columns with 2 elements each

# 2.4 create a matrix

mat.v1 \<- matrix(data = v1, nrow = 2) print(mat.v1) \# there are 3 columns

# 2.4 create a second matrix using byrow

mat.w \<- matrix(data = v1, nrow = 2, byrow = TRUE) print(mat.w) \# created matw

# 2.5 find a number inside the matrix

element \<- mat.w\[2, 2\] print(element) \# answer is 9 element2 \<- mat.v1\[2, 2\] print(element2) \# answer is 7

# 3 Lists

months_totaldays \<- list( January = 31, February = 28, March = 31, April = 30, May = 31, June = 30, July = 31, August = 31, September = 30, October = 31, November = 30, December = 31 ) print(months_totaldays) \# list created

# 3.2 days in August

days_in_August \<- months_totaldays\$August print(days_in_August) \# 31 days in August

# 3.3 convert the list to a vector

vector_months_days \<- unlist(months_totaldays) print(vector_months_days) \# unlisted

# 4. Apply functions

# 4.1 loa data mtcars

data(mtcars) \# loaded data set mtcars

# 4.2 calculate the min values for mtcars

min_values \<- apply(mtcars, 2, min) print(min_values) \# printed the minimum values for each column

# 4.3 checking for zeros

zero_check \<- function(column) { any(column == 0) } \# set up function to detect for zeros zero_indicator \<- apply(mtcars, 2, zero_check) \# created an object to indicate if there are zeros in columns print (zero_indicator) \# detected one column with zeros
