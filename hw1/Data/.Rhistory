# function works properly
# 3.2 find missing values within a vector
identify_missing_values <- function(vector) {
missing_indices <- which(is.na(vector))
if (length(missing_indices) == 0) {
message(paste("there are no missing values in the vector."))
} else {
for (index in missing_indices) {
message(paste("missing values found at position", index, "in the vector."))
}
}
}
# set up if else function to identify missing values
vector <- c(1,NA, 3, NA)
# created vector containing missing values
identify_missing_values(vector)
# missing values found at position 2 and position 4
add_ten <- function(x) {
result <- (x) + 10
return(result)
}
return(result)
add_ten <- function(x)
result <- (x) + 10
result <- (x) + 10
add_ten <- function(x) {
result <- x + 10
return(result)
}
# Call the function with an argument
result <- add_ten(5)
# Print the result
print(result)  # Should output 15
##---------------------------------------------------------
## R code for Data Science for Beginners Day 2: Exercises
## Univeristy of Essex
## Author: Jack Jeffrey
##---------------------------------------------------------
# Task 1. if...else function
# Mary and John's family seating for movie
movies_seats <- 1:10
for (seat in movies_seats) {
if (seat >= 1 && seat<= 5) {
message(paste("seat", seat, "is assigned to Mary's family."))
} else if (seat >= 6 && seat <= 10) {
message(paste("seat", seat, "is assigned to John's family."))
}
}
# movie seats have been assigned
# Task 1-2.
# Mixing up the family members
for (seat in movies_seats) {
if (seat >= 1 && seat <= 5) {
# for seats 1-5, alternate between Mary and John's family
if (seat %% 2 == 1) {
message(paste("seat", seat, "is assigned to Mary's family."))
} else {
message(paste("seat", seat, "is assigned to John's family."))
}
} else if (seat >= 6 && seat <= 10) {
# for seats 6-10, alternate between John's and Mary's family
if (seat %% 2 == 0) {
message(paste("seat", seat, "is assigned to John's family."))
} else {
message(paste("seat", seat, "is assigned to Mary's family."))
}
}
}
# family members successfully mixed together
# Task 2. loop
# 2-1. Printing Years from 2012 - 2022
years <- 2012:2022
for (year in years) {
message(paste("year", year))
}
# years from 2012 to 2022 successfully printed
# 2-2. Loop with complete sentence
for (year in years) {
sentence <- paste("the year is", year)
message(paste(sentence))
}
# sentences successfully printed
# 2-3. Exclude 2020 and 2021 due to COVID-19
for (year in years) {
#skip the years 2020 and 2021
if (year == 2020 || year == 2021) {
next
}
sentence <- paste("The year is", year)
message(paste(sentence))
}
# successfully excluded the COVID-19 years from the loop
# Task 3. functions
# Define the function
add_ten <- function(x) {
result <- x + 10
return(result)
}
# assign result to number
result <- add_ten(5)
print(result)
# Should output 15
# created function that always adds 10
add_ten(3)
add_ten(10)
# function works properly
# 3.2 find missing values within a vector
identify_missing_values <- function(vector) {
missing_indices <- which(is.na(vector))
if (length(missing_indices) == 0) {
message(paste("there are no missing values in the vector."))
} else {
for (index in missing_indices) {
message(paste("missing values found at position", index, "in the vector."))
}
}
}
# set up if else function to identify missing values
vector <- c(1,NA, 3, NA)
# created vector containing missing values
identify_missing_values(vector)
# missing values found at position 2 and position 4
add_ten(3)
add_ten(10)
identify_missing_values <- function(vector) {
missing_indices <- which(is.na(vector))
if (length(missing_indices) == 0) {
message(paste("there are no missing values in the vector."))
} else {
for (index in missing_indices) {
message(paste("missing values found at position", index, "in the vector."))
}
}
}
vector <- c(1,NA, 3, NA)
identify_missing_values(vector)
##---------------------------------------------------------
## R code for Data Science for Beginners Day 2: Exercises
## Univeristy of Essex
## Author: Jack Jeffrey
##---------------------------------------------------------
# Task 1. if...else function
# Mary and John's family seating for movie
movies_seats <- 1:10
for (seat in movies_seats) {
if (seat >= 1 && seat<= 5) {
message(paste("seat", seat, "is assigned to Mary's family."))
} else if (seat >= 6 && seat <= 10) {
message(paste("seat", seat, "is assigned to John's family."))
}
}
# movie seats have been assigned
# Task 1-2.
# Mixing up the family members
for (seat in movies_seats) {
if (seat >= 1 && seat <= 5) {
# for seats 1-5, alternate between Mary and John's family
if (seat %% 2 == 1) {
message(paste("seat", seat, "is assigned to Mary's family."))
} else {
message(paste("seat", seat, "is assigned to John's family."))
}
} else if (seat >= 6 && seat <= 10) {
# for seats 6-10, alternate between John's and Mary's family
if (seat %% 2 == 0) {
message(paste("seat", seat, "is assigned to John's family."))
} else {
message(paste("seat", seat, "is assigned to Mary's family."))
}
}
}
# family members successfully mixed together
# Task 2. loop
# 2-1. Printing Years from 2012 - 2022
years <- 2012:2022
for (year in years) {
message(paste("year", year))
}
# years from 2012 to 2022 successfully printed
# 2-2. Loop with complete sentence
for (year in years) {
sentence <- paste("the year is", year)
message(paste(sentence))
}
# sentences successfully printed
# 2-3. Exclude 2020 and 2021 due to COVID-19
for (year in years) {
#skip the years 2020 and 2021
if (year == 2020 || year == 2021) {
next
}
sentence <- paste("The year is", year)
message(paste(sentence))
}
# successfully excluded the COVID-19 years from the loop
# Task 3. functions
# Define the function
add_ten <- function(x) {
result <- x + 10
return(result)
}
result <- add_ten(5)
print(result)
# Should output 15
# created function that always adds 10
add_ten(3)
add_ten(10)
# function works properly
# 3.2 find missing values within a vector
identify_missing_values <- function(vector) {
missing_indices <- which(is.na(vector))
if (length(missing_indices) == 0) {
message(paste("there are no missing values in the vector."))
} else {
for (index in missing_indices) {
message(paste("missing values found at position", index, "in the vector."))
}
}
}
# set up if else function to identify missing values
vector <- c(1,NA, 3, NA)
# created vector containing missing values
identify_missing_values(vector)
# missing values found at position 2 and position 4
## R code for Data Science for Beginners Day 3: Individual Exercises
## University of Essex
## Author: Jack Jeffrey
## Date 09-06-2024
# 1. Vectors
# 1.1 Create a vector
vec.a <- c(1,3,5,7)
# combined digits into a vector
# 1.2 Create a second vector
vec.b <- c(2,4,6,8)
# created a second vector
# 1.3 subtract the vectors
(vec.a - vec.b)
# subtracted vec.b from vec.a
# 1.4 create a new vector by multiplying vec.a and vec.b
vec.c <- (vec.a * vec.b)
# created vector.c
# 1.5 create a new vector by taking the square root of each element in vec.c
vec.d <- sqrt(vec.c)
# created vector.d
# 1.6 find the third element of vector.d
third_element <- vec.d[3]
third_element
# identified third element in vec.d as 5.477226
# 1.7 create a vector 1-100 using seq
vec.e <- seq(1, 100)
# created vec.e
# 1.8 use the mean fucntion on vec.e
vec_e_mean <- mean(vec.e)
# calculated the mean for vec.e
# 1.9 use the sum function
vec_e_sum <- sum(vec.e)
print(vec_e_sum)
# vec_e_sum = 5050
# 1.10 use the length function
vec_e_length <- length(vec.e)
print(vec_e_length)
# length equals 100
# 1.11 divide sum by length
vec_e_sumandlength <- sum(vec.e) / length(vec.e)
print(vec_e_sumandlength)
# sum divided by length = 50.5 the same as the mean function
# 1.12 create an object that shows the olympic sequence
olympics <- seq(from = 1896, to = 2012, by = 4)
print(olympics)
# sequence successfully completed
# 1.13 number of elements in the olympics sequence
length(olympics)
#length = 30
# 1.14 display the years of the olympics
paste(olympics)
# 1.15 find the number of olympics to 2040
future_olympics <- seq(from = 1896, to = 2040, by = 4)
total_olympics_2040 <- length(future_olympics)
print(total_olympics_2040)
# there will be 37 olympics since 1896 in 2040
# 2. Matrices
v1 <- c(1,3,5,7,9,11)
# created a vector
# 2.2 length of the vector
length(v1)
# v1 length = 6
# 2.3 how many columns?
# answer is 3 columns with 2 elements each
# 2.4 create a matrix
mat.v1 <- matrix(data = v1, nrow = 2)
print(mat.v1)
# there are 3 columns
# 2.4 create a second matrix using byrow
mat.w <- matrix(data = v1, nrow = 2, byrow = TRUE)
print(mat.w)
# created matw
# 2.5 find a number inside the matrix
element <- mat.w[2, 2]
print(element)
# answer is 9
element2 <- mat.v1[2, 2]
print(element2)
# answer is 7
# 3 Lists
months_totaldays <- list(
January = 31,
February = 28,
March = 31,
April = 30,
May = 31,
June = 30,
July = 31,
August = 31,
September = 30,
October = 31,
November = 30,
December = 31
)
print(months_totaldays)
# list created
# 3.2 days in August
days_in_August <- months_totaldays$August
print(days_in_August)
# 31 days in August
# 3.3 convert the list to a vector
vector_months_days <- unlist(months_totaldays)
print(vector_months_days)
# unlisted
# 4. Apply functions
# 4.1 loa data mtcars
data(mtcars)
# loaded data set mtcars
# 4.2 calculate the min values for mtcars
min_values <- apply(mtcars, 2, min)
print(min_values)
# printed the minimum values for each column
# 4.3 checking for zeros
zero_check <- function(column) {
any(column == 0)
}
# set up function to detect for zeros
zero_indicator <- apply(mtcars, 2, zero_check)
# created an object to indicate if there are zeros in columns
print (zero_indicator)
# detected one column with zeros
rm(list=ls(all=TRUE))
cat("\014")
libraru(tidyverse)
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
packageVersion("tidyverse")
install.packages("nycflights13")
library("nycflights13")
library("nycflights13")
flights$date <- as.Date(flights$date)
march_flights <- flights %>%
filter(format(date, "%m") == "03")
install.packages("nycflights13")
library("nycflights13")
# Load the package
library(nycflights13)
# Check the dataset
head(flights)
flights$date <- as.Date(flights$date)
march_flights <- flights %>%
filter(format(date, "%m") == "03")
march_flights <- flights %>%
filter(month == 3)
str(flights)
march_flights <- flights %>%
filter(month == 3)
install.packages("tidyverse")
library(tidyverse)
str(flights)
march_flights <- flights %>%
filter(month == 3)
head(march_flights)
flights_with_dates <- flight %>%
mutate(date = make_date(year, month, day))
march_flights <- flights %>%
filter(month == 3)
head(march_flights)
flights_with_dates <- flight %>%
mutate(date = make_date(year, month, day))
flights_with_dates <- flights %>%
mutate(date = make_date(year, month, day))
head(flights_with_dates)
flights_rename <- flights %>%
rename(tail_number = tailnum)
head(flights_renamed)
head(flights_rename)
view(flights)
flights_rename <- flights %>%
rename(tail_number = tailnum)
view(flights)
view(flights_rename)
flights_origin <- flights %>%
group_by(origin)
view(flights_origin)
head(flights_origin)
str(flights_origin)
group_vars(flights_origin)
jfk_departures <- flights %>%
filter(origin == "JFK", year == 2013, month == 12, day ==31) %>%
summarize(count = n())
jfk_departures
jfk_delay_average <- flights %>%
filter(origin == "JFK") %>%
summarize(avg_delay_hours = mean(dep_delay,na.rm = TRUE /60))
jfk_delay_average
jfk_delay_average <- flights %>%
filter(origin == "JFK") %>%
summarize(avg_delay_hours = mean(dep_delay,na.rm = TRUE /60))
jfk_delay_average
jfk_delay_average <- flights %>%
filter(origin == "JFK") %>%
summarize(avg_delay_hours = mean(dep_delay,na.rm = TRUE /60)
jfk_delay_average
summarize(avg_delay_hours = mean(dep_delay, na.rm = TRUE) /60)
jfk_delay_average <- flights %>%
filter(origin == "JFK") %>%
summarize(avg_delay_hours = mean(dep_delay, na.rm = TRUE) /60)
jfk_delay_average
##title: "Jeffrey_exercise4_hw1"
##author: "Jack Jeffrey"
##date: "2024-09-09"
##output: html_document
rm(list=ls(all=TRUE))
#cleaned up workspace
cat("\014")
#cleaned up console
# 1.
install.packages("tidyverse")
library(tidyverse)
# instealled tidyverse and dplyr
library(nycflights13)
head(flights)
# Check the dataset
# 1.1 find all March flights
str(flights)
march_flights <- flights %>%
filter(month == 3)
head(march_flights)
# successfully located March flights
# 1.2 new variable using mutate
flights_with_dates <- flights %>%
mutate(date = make_date(year, month, day))
head(flights_with_dates)
# new date variable created using mutate
# 1.3 change column name
flights_rename <- flights %>%
rename(tail_number = tailnum)
view(flights_rename)
##title: "Jeffrey_exercise4_hw1"
##author: "Jack Jeffrey"
##date: "2024-09-09"
##output: html_document
rm(list=ls(all=TRUE))
#cleaned up workspace
cat("\014")
#cleaned up console
# 1.
install.packages("tidyverse")
library(tidyverse)
# instealled tidyverse and dplyr
library(nycflights13)
head(flights)
# Check the dataset
# 1.1 find all March flights
str(flights)
march_flights <- flights %>%
filter(month == 3)
head(march_flights)
# successfully located March flights
# 1.2 new variable using mutate
flights_with_dates <- flights %>%
mutate(date = make_date(year, month, day))
head(flights_with_dates)
# new date variable created using mutate
# 1.3 change column name
flights_rename <- flights %>%
rename(tail_number = tailnum)
view(flights_rename)
# created new dataset with corrected column name
# 1.4 group flights by their origin
flights_origin <- flights %>%
group_by(origin)
str(flights_origin)
group_vars(flights_origin)
# flights grouped by origin
# 1.5 counting JFK departures 2013
jfk_departures <- flights %>%
filter(origin == "JFK", year == 2013, month == 12, day ==31) %>%
summarize(count = n())
jfk_departures
# 283 departed flights from JFK on 12/31 2013
# 1.6 calculating average delays at JFK
jfk_delay_average <- flights %>%
# created the object for JFK flight delays
filter(origin == "JFK") %>%
# selected flighst from JFK
summarize(avg_delay_hours = mean(dep_delay, na.rm = TRUE) /60)
# calculated the average delay in hours and removed na
jfk_delay_average
# average delay = 0.202 hours or about 20 minutes
setwd("~/Documents/Poli502_Jeffrey/hw1/Data")
world_data <- read.csv("~/Documents/Poli502_Jeffrey/hw1/Data/world.csv")
head(world_data
head(world_data)
head(world_data)
